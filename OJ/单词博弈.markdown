# 单词博弈

标签（空格分隔）： OJ

---
[TOC]

## 题目
> 甲乙两个人用一个英语单词玩游戏。两个人轮流进行，每个人每次从中删掉任意一个字母，如果剩余的字母序列是严格单调递增的（按字典序a < b < c < ... < z)，则这个人胜利。 
> 两个人都足够聪明（即如果有赢的方案，都不会选输的方案 ），甲先开始，问他能赢么？
>
> 输入： 一连串英文小写字母，长度不超过15,保证最开始的状态不是一个严格单增的序列。 
> 输出：1表示甲可以赢，0表示甲不能赢。 
> 例如: 输入 bad， 则甲可以删掉b或者a,剩余的是ad或者bd，他就赢了，输出1。 
> 又如: 输入 aaa， 则甲只能删掉1个a，乙删掉一个a,剩余1个a，乙获胜，输出0。

## 解题思路

主要思路：递归 + 缓存

- 如果字符串是两位，可以直接判断出结果: 赢了
- 每次删掉一位，假设删掉后的字符是输，那本次就是赢了
- 假设删掉任意一个字符，剩下的字符都是赢，那本次就是输了
- 用递归的方法一直删到剩下两位，就得到结果了

## 代码

```java
public static final Map<String, Boolean> cache = new HashMap<String, Boolean>();

public int who(String input)
{
	int ret = who(input, 1);
	cache.clear();
	return ret;
}

public static int who (String word, int op) {
	if (cache.containsKey(word)) {
		return cache.get(word) ? op : (op + 1) % 2;
	}
	if (word.length() == 2) {
		return op;
	}
	for (int i=0; i<word.length(); i++) {
		String temp = new StringBuilder(word).delete(i, i+1).toString();
		if (isAsc(temp) || who(temp, (op + 1) % 2) == op) {
			cache.put(word, true);
			return op;
		}
	}
	cache.put(word, false);
	return (op + 1) % 2;
}

public static boolean isAsc (String word) {
	for(int i=1; i<word.length(); i++) {
		if(word.charAt(i) <= word.charAt(i-1)) {
			return false;
		}
	}
	return true;
}
```






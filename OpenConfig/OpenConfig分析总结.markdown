# OpenConfig分析总结

标签（空格分隔）： OpenConfig

---
[TOC]

## 背景
### 1. 管理平面的挑战

主要是大规模网络的管理挑战。

- 20+网络设备角色
- 超过半打的厂商，多平台
- 400万行的配置文件
- 每月约3万的配置更改
- 每5分钟超过800万的OID被收集
- 每5分钟超过2万行命令下发及删除
- 很多管理工具，并且多代软件

这是一个明显的节省运营成本的好机会：减少停电影响，管理堆栈，自动化/自愈的简化，更好的扩展性。。。

### 2. 落后的管理平面

- 太多专有的集成
    - 命令行，脚本，模板，模型，指导手册。。。
- 缺乏可用的抽象和通用的API
- 清除设备配置
- SNMP监控--始于标准，终于企业
    - 不够简单而且不容易扩展

现有的管理平面已经落后，期待开放的网络管理平面（模型驱动的网络管理？）

### 3. 落后的网络遥测技术

SNMP基本是默认选项。

- 传统的实现 - 专门为有限的处理和带宽
- 昂贵的可发现性 - 查找MIB库来发现新元素
- 没有广告能力 - 测试OID以确定是否支持
- 刚性结构 - 添加新数据方面的可扩展性非常有限
- 专有数据 - 要求供应商特有的映射和多个请求重新组合数据
- 协议停滞 - 没有吸收当前数据建模和传输技术

所以，遥测技术面临挑战。

### 4. 遥测技术的挑战

- SNMP对象集合随着每一代平台的出现而不断增长
    - 例如，当前平台只有10万对象，但未来两代平台将会有3倍的增长
    - 类似的对象收集频率
- 未来的设备密度将会保持增长的趋势
    - 限制高频率数据采集的规模
- 接近实时的采集和访问监控数据
    - 交通管理，严格控制循环，快速恢复

所以，SNMP越来越不符合未来网络发展的需要，但除了SNMP，有更好的办法吗？
            
### 5. 开放的管理平面的元素（模型驱动的网络管理）

那开放的网络管理平面又需要具备哪些元素呢？如下图所示：

![openconfig-collaborating-to-enable-programmable-network-management-4-638.jpg-62.8kB][1]
    
主要体现在三个方面：

- 配置
- 遥测
- 拓扑

### 6. 反思遥测技术（反转数据流？）

![QQ图片20150921142655.png-86.3kB][2]

- 持续的流数据 -- 基于订阅的增量更新
- 通过时间序列数据流观察网络状态
- 拥有描述所期望的结构和内容的可编程设备
- 有效安全的传输协议

### 7. 遥测框架需求
- 网络元素以流的方式式将数据推送到收集器（推送模型）
- 尽可能基于厂商中立的模型来进行数据填充
- 通过发布/订阅方式的API来选择需要的数据
- 规模需要满足未来十年高频数据增长密度
- 利用拥有活跃开发社区的现代传输机制
    - 例如gRPC(HTTP/2),Thrift,protobuf over UDP

所以说，SNMP已经过时了！

## OpenConfig出现
OpenConfig是由Google牵头和AT&T、微软、BT成立OpenConfig工作组，建立一套厂商中立的网络配置和策略模型，实现应用直接对网络进行编程而不需要人工干预。这个OpenConfig工作组在2014/10/26向IETF提交了BGP Configuration Model for Service Provider Networks初稿。这份文稿基于运营商和内容提供商运营需求，定义了一套配置和管理BGP协议、策略和运营方面的YANG数据模型。

Google希望开放其网络配置和拓扑模型，最终实现整个网络的抽象视图，实现应用自动触发的网络编程和配置的自动化，和厂商设备无关。

分析点评：

> SDN从DC聚焦控转分离、虚拟化对应到运营商公网一直找不到合适的突破口，到目前为止还是局限在自动化运维、网络优化调优上。而NFV作为SDN引发的设备重构还是局限在单点设备上。OpenConfig直击BGP要害，是真正对运营商网络、互联网基础IP网络进行开放、可编程大动作的第一步，是基于改良渐变走向公网大网控转分离、集中控制的第一步，是以退（抽象的厂商无关的BGP配置和策略模型）为进（改良渐变实现大网开放、可编程、集中控制）的巨大一步。

> DC领域白盒交换机已经非常清晰，而运营商十分期待的公网白牌化的路径还非常模糊，NFV也许是急先锋但只是网络中很小的一部分。Google基于自己实践牵头组建的Open Config工作组，这是打响公网白牌化的第一枪。

## OpenConfig动机
- 管理接口是厂商无关，平台无关，版本具体的
    - NETCONF/RESTCONF，CIM，SNMP没有解决这个问题
    - 自动化框架（Puppet，Chef，Ansible等）没有解决这个问题
- 复杂性和成本转移给操作者
    - 对所有专有的变化必须有构建、生成和测试工具 
    - 配置和监控标准协议和服务没有不必要的差异
    - 需要专门的技能来处理专有的差异

OpenConfig希望将被厂商绑架的网络管理解救出来，用同一套技术方案来统一网络管理。

## OpenConfig：用户定义API
- 网络运营商的正规行业协作
- 重点：根据实际操作定义厂商中立的配置和运行状态模型
- 主要输出是模型代码，通过公共GitHub库发布为开放源代码
- 与主要厂商建立伙伴关系，以推动本地实现
    - 完全支持和维护为一体的平台软件部分
    - 提供给所有的客户，没有“特价”
- 参与标准（IETF，ONF）和OSS项目（ODL，ONOS，NTT）

## OpenConfig为什么需要行业合作
- 拓展的用例超过了任何一个运营商/客户
- 简化厂商 -- 巩固客户的要求
- 通过广泛的审查和开放的过程不断改进模型
- 通过集体的力量来驱动的发展模式
- 确保不同的管理/NMS方法是否切合实际

## OpenConfig参与者
广泛的使用案例，网络环境中，供应商的部署，服务和商业模式
![openconfig-collaborating-to-enable-programmable-network-management-9-638.jpg-49.1kB][3]
Level(3)/BT/at&t/xfinity/cox/google/facebook/Microsoft/Apple/Yahoo

## OpenConfig进展

OpenConfig由Google牵头，也是Google最积极。Google目前正努力推动SDN技术的发展，将新方案引入OpenConfig当中，并在此基础上公布了其部分网络配置模型供其它厂商参考。

### 数据模型（配置和运行状态）
- BGP和路由策略
    - 多个厂商正在实现
    - BGP模型被IETF接纳进行标准跟踪
- 本地路由（本地生成的静态路由，聚合等）
- MPLS/TE综合模型
    - RSVP/TE和分段路由作为初始焦点
- 设备型号 -- 通用结构构成的模型

### 设计模式和可用性方面的改进
- 设计模式的运行状态和模型组成
- 模型目录建议

### 模型目前正在审查
- 更新接口和系统模型
- RIB模型 -- 代表通用格式的路由表
- 光传输设备（传输SDN）

### 工具和API
- pyangbind -- 从YANG模型生成Python类
- 协议无关的规范的配置和遥测RPC的本机实现 -- BGP + 策略模型
    - 思科IOS-XR
    - 瞻博JUNOS
    - 其他正在实现的厂商

## 建模工作状态
### 运行状态数据的类型
- 派生，协商，由协议等设置（协商BGP保持时间）
- 运行状态数据计数器或统计信息（接口计数器）
- 运行状态数据代表的应用配置（配置实际对比）

### 使用YANG明显的好处是配置和运行状态在同一个数据模型建模
- 提供跨设备的通用结构的监测数据
- 轻松关联配置与相应的状态
- 但是......YANG重点主要是配置，NETCONF为中心，缺乏共同的约定

## 关于YANG/NETCONF的观察
- YANG和NETCONF应该解耦--每一个都是有单独作用的
- YANG需要在早期更快发展，随着实际使用增长保持稳定
- YANG需要审查以及从一个更大范围的用户的不同视角输入
- 当前YANG模型版本管理并没有什么用处--以软件产品的方式来对待模型，而不是注明日期的文档
- 当前“标准”模型应该开放出来重新审视和修订，避免更多的模型被部署到生产环境中使用前仓促标准化

这些观点OpenConfig还没达成一致

## OpenDaylight机会（重点关注）
- ODL网络管理系统
    - 网络管理系统作为ODL平台一流的用例
    - 鼓励聚焦于更多的管理和运营功能
- 支持OpenConfig
    - 使用OpenConfig发布的模型作为ODL能力的接口 
- YANG工具化和生态系统
    - 通用的YANG模型的工具链
    - 使模型语言功能的试验成为现实

对其他SDN相关的OSS项目有相同的机会：例如OPNFV，ONOS

### OpenDaylight网络管理系统
- ODL已经支持一些管理/运营功能
    - 监控和路径管理：SNMP，BGP-LS/PCEP
    - 网络配置：NETCONF/RESTCONF，OVSDB
    - 数据管理和建模：YANG工具，时序数据仓库
- 潜在的附加功能
    - 发布/订阅模式的流遥测收集器
    - 支持额外数据传输和编码
    - 配置校验

### ODL中对OpenConfig模型的支持
配置和监控API基于OpenConfig模型。
- BGP和路由策略
    - ODL BGP接口实现
    - 一些正在进行的进展（例如，IETF93 hackthon）
- MPLS/TE
    - 与PCEP集成，分段路由

### 开发YANG生态系统
- 交叉验证YANG工具和模型
- 使YANG模型更易于可视化和试验
- 从YANG模型生成的代码构件的一致性
    - 例如，类绑定Java,Python,Go等
- 改进了YANG模型语言
    - 用户/执行者的角度来补充IETF标准
    - 地址重大缺陷（列表，版本控制，选择器，模型组成）
        - 可以看看Colin Dixon在ONS 2015关于YANG/ODL的演讲

## 总结
- 网络管理需要一个模型驱动的途径来进入SDN和可编程网络的时代
- OpenConfig是一种新型的行业合作
    - 网络运营商直接贡献开源数据模型，工具和设计模式
- 作为本机的实现变得可用，潜在显著改变网络监控和配置
- 为OpenDaylight和其他开源软件项目的重要作用，帮助实现愿景


  [1]: http://static.zybuluo.com/Jack2code/29c63e6el6c3suzuwqozbac5/openconfig-collaborating-to-enable-programmable-network-management-4-638.jpg
  [2]: http://static.zybuluo.com/Jack2code/9k7w3jrc149rc0kdau2pu04c/QQ%E5%9B%BE%E7%89%8720150921142655.png
  [3]: http://static.zybuluo.com/Jack2code/kgh6iyhrwn5huayf3l3g72wx/openconfig-collaborating-to-enable-programmable-network-management-9-638.jpg